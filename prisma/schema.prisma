generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ================================
// ENUMS
// ================================

enum UserRoles {
  GURU
  MURID
  ADMIN
}

enum UserTier {
  FREE
  PREMIUM
  CUSTOM // Added Custom plan
}

enum KelasType {
  REGULAR
  EVENT
  GROUP
  PRIVATE
  FUN
}

enum KelasLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum LiveSessionStatus {
  SCHEDULED
  LIVE
  ENDED
}

enum VocabularyType {
  WORD
  SENTENCE
  IDIOM
}

enum PartOfSpeech {
  KATA_KERJA // Verb
  KATA_BENDA // Noun
  KATA_SIFAT // Adjective
  KATA_KETERANGAN // Adverb
}

enum ActivityType {
  LOGIN
  COMPLETE_MATERI
  COMPLETE_KELAS
  COMPLETE_QUIZ
  VOCABULARY_PRACTICE
  DAILY_CHALLENGE
  PARTICIPATE_LIVE_SESSION
  PLAY_GAME
  OTHER
}

enum MidtransStatus {
  PENDING
  SUCCESS
  FAILED
  CHALLENGE
  SETTLEMENT
  CAPTURE
  EXPIRE
  CANCEL
}

// ================================
// CORE USER & AUTH MODELS
// ================================

model User {
  id                    String                 @id @default(cuid())
  email                 String                 @unique
  name                  String?
  role                  UserRoles              @default(MURID)
  accessTier            UserTier               @default(FREE)
  emailVerified         Boolean                @default(false) // Boolean for Better Auth compatibility
  image                 String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  // Streak related fields
  currentStreak         Int                    @default(0)
  maxStreak             Int                    @default(0)
  lastActivityDate      DateTime?
  // XP and Level fields
  xp                    Int                    @default(0)
  level                 Int                    @default(1)
  accounts              Account[]
  sessions              Session[]
  authoredArticles      Article[]              @relation("ArticleAuthor")
  authoredKelas         Kelas[]                @relation("KelasAuthor")
  createdLiveSessions   LiveSession[]          @relation("LiveSessionCreator")
  materiCompletions     UserMateriCompletion[]
  vocabularySets        VocabularySet[]
  pushNotifications     PushNotification[]
  joinedKelas           Kelas[]                @relation("KelasMembers")
  joinedLiveSessions    LiveSession[]          @relation("LiveSessionParticipants")
  soals                 Soal[]                 @relation("SoalAuthor")
  drawings              ExcalidrawDrawing[]
  tryoutParticipations  TryoutParticipant[]
  koleksiSoals          KoleksiSoal[]          @relation("KoleksiSoalAuthor")
  createdTryouts        Tryout[]               @relation("TryoutGuru")
  subscriptions         Subscription[] // Added relation to Subscription
  activityLogs          ActivityLog[] // Added relation to ActivityLog
  isCertificateEligible Boolean                @default(false) // Added for certificate eligibility

  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  ipAddress String?
  userAgent String?

  @@index([userId])
  @@map("session")
}

model Account {
  id                   String    @id @default(cuid())
  userId               String
  providerId           String
  accountId            String
  refreshToken         String?   @db.Text
  accessToken          String?   @db.Text
  accessTokenExpiresAt DateTime?
  scope                String?
  idToken              String?   @db.Text
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  refreshTokenExpiresAt DateTime?
  password              String?

  @@unique([providerId, accountId])
  @@index([userId])
  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

// ================================
// COURSE & EDUCATION MODELS
// ================================

model Kelas {
  id              Int             @id @default(autoincrement())
  title           String
  description     String?
  jsonDescription Json?           @db.JsonB
  htmlDescription String?
  type            KelasType       @default(REGULAR)
  level           KelasLevel
  thumbnail       String?
  icon            String?
  isCompleted     Boolean         @default(false)
  isPaidClass     Boolean         @default(false)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  authorId        String
  author          User            @relation("KelasAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  materis         Materi[]        @relation("KelasMateri")
  liveSessions    LiveSession[]   @relation("KelasLiveSessions")
  members         User[]          @relation("KelasMembers")
  vocabularySets  VocabularySet[] // Added inverse relation
}

model Materi {
  id              Int                    @id @default(autoincrement())
  title           String
  description     String
  jsonDescription Json                   @db.JsonB
  htmlDescription String
  order           Int
  isDemo          Boolean                @default(false)
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  kelasId         Int
  kelas           Kelas                  @relation("KelasMateri", fields: [kelasId], references: [id], onDelete: Cascade)
  completions     UserMateriCompletion[]

  @@index([kelasId])
  @@index([order])
}

model UserMateriCompletion {
  id          Int      @id @default(autoincrement())
  userId      String
  materiId    Int
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  materi      Materi   @relation(fields: [materiId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, materiId])
  @@index([userId])
  @@index([materiId])
}

model LiveSession {
  id             String            @id @default(cuid())
  name           String
  description    String?
  streamCallId   String? // Stream Video Call ID
  status         LiveSessionStatus @default(SCHEDULED)
  scheduledStart DateTime
  scheduledEnd   DateTime?
  actualStart    DateTime?
  actualEnd      DateTime?
  recordingUrl   String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  creatorId      String
  kelasId        Int
  kelas          Kelas             @relation("KelasLiveSessions", fields: [kelasId], references: [id], onDelete: Cascade)
  creator        User              @relation("LiveSessionCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  participants   User[]            @relation("LiveSessionParticipants")

  @@index([streamCallId])
  @@index([kelasId])
}

model Article {
  id              Int      @id @default(autoincrement())
  title           String
  description     String?
  jsonDescription Json     @db.JsonB
  htmlDescription String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  authorId        String
  author          User     @relation("ArticleAuthor", fields: [authorId], references: [id], onDelete: Cascade)
}

// ================================
// ASSESSMENT & QUIZ MODELS
// ================================

model KoleksiSoal {
  id        Int      @id @default(autoincrement())
  nama      String
  deskripsi String?
  isPrivate Boolean  @default(false)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation("KoleksiSoalAuthor", fields: [userId], references: [id], onDelete: Cascade)
  soals     Soal[]
  tryouts   Tryout[]

  @@index([userId])
}

model Soal {
  id             Int         @id @default(autoincrement())
  koleksiSoalId  Int
  authorId       String // Changed to String to match existing User id type
  pertanyaan     String
  attachmentUrl  String?
  attachmentType String?
  difficulty     Difficulty?
  explanation    String?
  isActive       Boolean     @default(true)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  koleksiSoal    KoleksiSoal @relation(fields: [koleksiSoalId], references: [id], onDelete: Cascade)
  author         User        @relation("SoalAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  opsis          Opsi[]
}

model Opsi {
  id             Int      @id @default(autoincrement())
  soalId         Int
  opsiText       String
  attachmentUrl  String?
  attachmentType String?
  isCorrect      Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  soal           Soal     @relation(fields: [soalId], references: [id], onDelete: Cascade)
}

model Tryout {
  id            Int                 @id @default(autoincrement())
  nama          String
  startTime     DateTime
  endTime       DateTime
  duration      Int                 @default(30) // Duration in minutes
  koleksiSoalId Int
  isActive      Boolean             @default(false)
  guruId        String
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  koleksiSoal   KoleksiSoal         @relation(fields: [koleksiSoalId], references: [id], onDelete: Cascade)
  guru          User                @relation("TryoutGuru", fields: [guruId], references: [id], onDelete: Cascade)
  participants  TryoutParticipant[]
}

model TryoutParticipant {
  id               Int       @id @default(autoincrement())
  tryoutId         Int
  userId           String
  score            Int       @default(0)
  submittedAt      DateTime?
  timeTakenSeconds Int? // Nullable for backward compatibility with existing records
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  tryout           Tryout    @relation(fields: [tryoutId], references: [id], onDelete: Cascade)
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([tryoutId, userId])
}

// ================================
// VOCABULARY & LEARNING TOOLS
// ================================

model VocabularySet {
  id          Int              @id @default(autoincrement())
  title       String
  description String?
  icon        String?          @default("FaBook")
  isPublic    Boolean          @default(false)
  userId      String?
  kelasId     Int? // Optional relation to Kelas
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  user        User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  kelas       Kelas?           @relation(fields: [kelasId], references: [id], onDelete: SetNull) // onDelete:SetNull or Cascade based on desired behavior
  items       VocabularyItem[]
}

model VocabularyItem {
  id           Int            @id @default(autoincrement())
  korean       String
  indonesian   String
  isLearned    Boolean        @default(false)
  type         VocabularyType @default(WORD)
  pos          PartOfSpeech? // Part of Speech
  audioUrl     String?
  collectionId Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  collection   VocabularySet  @relation(fields: [collectionId], references: [id], onDelete: Cascade)

  @@index([collectionId])
}

model ExcalidrawDrawing {
  id        String   @id @default(cuid())
  name      String
  elements  Json     @db.JsonB // Excalidraw elements as JSON
  appState  Json?    @db.JsonB // Excalidraw app state as JSON
  files     Json?    @db.JsonB // Files data as JSON
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// ================================
// UTILITY & FEATURE MODELS
// ================================

model PushNotification {
  id        String   @id @default(cuid())
  endpoint  String   @unique
  p256dh    String
  auth      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// Added Subscription model for Midtrans tracking

model Subscription {
  id              String         @id @default(cuid())
  userId          String
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  midtransOrderId String         @unique // Store the Midtrans order_id from createTransaction API
  status          MidtransStatus // Midtrans payment status
  accessTier      UserTier // The access tier subscribed to (e.g., PREMIUM)
  startDate       DateTime? // Set when payment is confirmed (settlement/capture+accept)
  endDate         DateTime? // Optional: For recurring/timed subscriptions
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Index for faster lookup via webhook
  @@index([userId])
  @@index([midtransOrderId])
}

// Activity log for tracking user activities, streaks, and XP changes

model ActivityLog {
  id             String       @id @default(cuid())
  userId         String
  type           ActivityType
  description    String?
  xpEarned       Int? // XP earned from this activity
  streakUpdated  Boolean      @default(false)
  previousStreak Int?
  newStreak      Int?
  previousLevel  Int?
  newLevel       Int?
  metadata       Json?        @db.JsonB // JSON for additional metadata
  createdAt      DateTime     @default(now())
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([createdAt])
  @@index([userId, type])
  @@index([userId, createdAt])
  @@index([type, createdAt])
}
