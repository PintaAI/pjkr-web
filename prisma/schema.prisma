generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ================================
// ENUMS
// ================================

enum UserRoles {
  GURU
  MURID
  ADMIN
}


enum KelasType {
  REGULAR
  EVENT
  GROUP
  PRIVATE
  FUN
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}


enum LiveSessionStatus {
  SCHEDULED
  LIVE
  ENDED
}

enum VocabularyType {
  WORD
  SENTENCE
  IDIOM
}

enum PartOfSpeech {
  KATA_KERJA // Verb
  KATA_BENDA // Noun
  KATA_SIFAT // Adjective
  KATA_KETERANGAN // Adverb
}

enum ActivityType {
  LOGIN
  COMPLETE_MATERI
  COMPLETE_KELAS
  COMPLETE_QUIZ
  VOCABULARY_PRACTICE
  DAILY_CHALLENGE
  PARTICIPATE_LIVE_SESSION
  PLAY_GAME
  CREATE_POST
  COMMENT_POST
  LIKE_POST
  LIKE_COMMENT
  SHARE_POST
  OTHER
}

enum PostType {
  DISCUSSION
  ANNOUNCEMENT
  QUESTION
  SHARE
  TUTORIAL
}

enum SharePlatform {
  TWITTER
  FACEBOOK
  TELEGRAM
  WHATSAPP
  COPY_LINK
  EMAIL
}

enum MidtransStatus {
  PENDING
  SUCCESS
  FAILED
  CHALLENGE
  SETTLEMENT
  CAPTURE
  EXPIRE
  CANCEL
}

// ================================
// CORE USER & AUTH MODELS
// ================================

model User {
  id                  String                 @id @default(cuid())
  email               String                 @unique
  name                String?
  role                UserRoles              @default(MURID)
  emailVerified       Boolean                @default(false)
  image               String?
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
  // Core user stats - simplified
  currentStreak       Int                    @default(0)
  xp                  Int                    @default(0)
  level               Int                    @default(1)
  
  // Auth relations
  accounts            Account[]
  sessions            Session[]
  
  // Social/Post relations
  authoredPosts       Post[]                 @relation("PostAuthor")
  comments            Comment[]              @relation("CommentAuthor")
  postLikes           PostLike[]             @relation("UserPostLikes")
  commentLikes        CommentLike[]          @relation("UserCommentLikes")
  postShares          PostShare[]            @relation("UserPostShares")
  
  // Education relations - core only
  authoredKelas       Kelas[]                @relation("KelasAuthor")
  joinedKelas         Kelas[]                @relation("KelasMembers")
  materiCompletions   UserMateriCompletion[]
  kelasCompletions    UserKelasCompletion[]
  createdLiveSessions LiveSession[]          @relation("LiveSessionCreator")
  joinedLiveSessions  LiveSession[]          @relation("LiveSessionParticipants")
  vocabularySets      VocabularySet[]
  vocabularyItems     VocabularyItem[]       @relation("VocabularyItemCreator")
  
  // Assessment relations - simplified
  soals               Soal[]                 @relation("SoalAuthor")
  koleksiSoals        KoleksiSoal[]          @relation("KoleksiSoalAuthor")
  createdTryouts      Tryout[]               @relation("TryoutGuru")
  tryoutParticipations TryoutParticipant[]
  
  // Utility relations
  drawings            ExcalidrawDrawing[]
  pushNotifications   PushNotification[]
  
  // Activity tracking
  activityLogs        ActivityLog[]
  subscriptions       Subscription[]

  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  ipAddress String?
  userAgent String?

  @@index([userId])
  @@map("session")
}

model Account {
  id                   String    @id @default(cuid())
  userId               String
  providerId           String
  accountId            String
  refreshToken         String?   @db.Text
  accessToken          String?   @db.Text
  accessTokenExpiresAt DateTime?
  scope                String?
  idToken              String?   @db.Text
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  refreshTokenExpiresAt DateTime?
  password              String?

  @@unique([providerId, accountId])
  @@index([userId])
  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([identifier])
  @@index([expiresAt])
  @@map("verification")
}

// ================================
// COURSE & EDUCATION MODELS
// ================================

model Kelas {
  id              Int                   @id @default(autoincrement())
  title           String
  description     String?
  jsonDescription Json?                 @db.JsonB
  htmlDescription String?
  type            KelasType             @default(REGULAR)
  level           Difficulty
  thumbnail       String?
  icon            String?
  isPaidClass     Boolean               @default(false)
  price           Decimal?              @db.Decimal(10,2) // Price for paid classes
  discount        Decimal?              @db.Decimal(10,2) // Discount amount
  promoCode       String?               // Promo code for discounts
  isDraft         Boolean               @default(true) // Draft vs Published
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  authorId        String
  author          User                  @relation("KelasAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  materis         Materi[]              @relation("KelasMateri")
  liveSessions    LiveSession[]         @relation("KelasLiveSessions")
  members         User[]                @relation("KelasMembers")
  vocabularySets  VocabularySet[]       // Added inverse relation
  completions     UserKelasCompletion[] // Track individual user completions
  posts           Post[]                @relation("KelasPosts") // Class discussion posts
  kelasKoleksiSoals KelasKoleksiSoal[]  // Many-to-many relation with question collections
}

model Materi {
  id              Int                    @id @default(autoincrement())
  title           String
  description     String
  jsonDescription Json                   @db.JsonB
  htmlDescription String
  order           Int
  isDemo          Boolean                @default(false)
  isDraft         Boolean                @default(true) // Draft vs Published
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
  kelasId         Int
  kelas           Kelas                  @relation("KelasMateri", fields: [kelasId], references: [id], onDelete: Cascade)
  completions     UserMateriCompletion[]

  @@index([kelasId])
  @@index([order])
  @@index([isDemo])
  @@index([isDraft])
}

model UserMateriCompletion {
  id          Int      @id @default(autoincrement())
  userId      String
  materiId    Int
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  materi      Materi   @relation(fields: [materiId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, materiId])
  @@index([userId])
  @@index([materiId])
}

model UserKelasCompletion {
  id          Int      @id @default(autoincrement())
  userId      String
  kelasId     Int
  isCompleted Boolean  @default(false)
  completedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  kelas       Kelas    @relation(fields: [kelasId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, kelasId])
  @@index([userId])
  @@index([kelasId])
}

model LiveSession {
  id             String            @id @default(cuid())
  name           String
  description    String?
  streamCallId   String?           // Stream Video Call ID
  status         LiveSessionStatus @default(SCHEDULED)
  scheduledStart DateTime
  scheduledEnd   DateTime?
  actualStart    DateTime?
  actualEnd      DateTime?
  recordingUrl   String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  creatorId      String
  kelasId        Int
  kelas          Kelas             @relation("KelasLiveSessions", fields: [kelasId], references: [id], onDelete: Cascade)
  creator        User              @relation("LiveSessionCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  participants   User[]            @relation("LiveSessionParticipants")

  @@index([streamCallId])
  @@index([kelasId])
  @@index([status])
  @@index([scheduledStart])
  @@index([creatorId])
}

model Post {
  id              Int           @id @default(autoincrement())
  title           String
  description     String?
  jsonDescription Json          @db.JsonB
  htmlDescription String
  type            PostType      @default(DISCUSSION)
  isPublished     Boolean       @default(true)
  isPinned        Boolean       @default(false)
  viewCount       Int           @default(0)
  likeCount       Int           @default(0)  // Denormalized for performance
  commentCount    Int           @default(0)  // Denormalized for performance
  shareCount      Int           @default(0)  // Denormalized for performance
  tags            String[]      @default([]) // Array of tags
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  authorId        String
  kelasId         Int?          // Optional relation to Kelas for class discussions
  author          User          @relation("PostAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  kelas           Kelas?        @relation("KelasPosts", fields: [kelasId], references: [id], onDelete: Cascade)
  comments        Comment[]     @relation("PostComments")
  likes           PostLike[]    @relation("PostLikes")
  shares          PostShare[]   @relation("PostShares")

  @@index([authorId])
  @@index([createdAt])
  @@index([isPublished])
  @@index([type])
  @@index([isPinned])
  @@index([likeCount])
  @@index([tags])
  @@index([viewCount])
  @@index([kelasId])
}

model Comment {
  id            Int            @id @default(autoincrement())
  content       String
  jsonContent   Json?          @db.JsonB
  htmlContent   String?
  isEdited      Boolean        @default(false)
  likeCount     Int            @default(0)  // Denormalized for performance
  replyCount    Int            @default(0)  // Denormalized for performance
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  authorId      String
  postId        Int
  parentId      Int?           // For nested comments/replies
  author        User           @relation("CommentAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  post          Post           @relation("PostComments", fields: [postId], references: [id], onDelete: Cascade)
  parent        Comment?       @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies       Comment[]      @relation("CommentReplies")
  likes         CommentLike[]  @relation("CommentLikes")

  @@index([postId])
  @@index([authorId])
  @@index([parentId])
  @@index([createdAt])
  @@index([likeCount])
}

model PostLike {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    String
  postId    Int
  user      User     @relation("UserPostLikes", fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation("PostLikes", fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([postId])
  @@index([userId])
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    String
  commentId Int
  user      User     @relation("UserCommentLikes", fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment  @relation("CommentLikes", fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
  @@index([commentId])
  @@index([userId])
}

model PostShare {
  id        Int           @id @default(autoincrement())
  createdAt DateTime      @default(now())
  userId    String
  postId    Int
  platform  SharePlatform @default(COPY_LINK)
  user      User          @relation("UserPostShares", fields: [userId], references: [id], onDelete: Cascade)
  post      Post          @relation("PostShares", fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([userId])
  @@index([platform])
  @@index([createdAt])
}

// ================================
// ASSESSMENT & QUIZ MODELS
// ================================

model KoleksiSoal {
  id        Int      @id @default(autoincrement())
  nama      String
  deskripsi String?
  isPrivate Boolean  @default(false)
  isDraft   Boolean  @default(true) // Draft vs Published
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation("KoleksiSoalAuthor", fields: [userId], references: [id], onDelete: Cascade)
  soals     Soal[]
  tryouts   Tryout[]
  kelasKoleksiSoals KelasKoleksiSoal[]

  @@index([userId])
  @@index([isPrivate])
  @@index([isDraft])
}

// Junction table for many-to-many relationship between Kelas and KoleksiSoal
model KelasKoleksiSoal {
  id         Int      @id @default(autoincrement())
  kelasId    Int
  koleksiSoalId Int
  // New metadata fields for soal set linking
  title      String
  description String?
  order      Int      @default(0)
  createdAt  DateTime @default(now())
  
  kelas      Kelas    @relation(fields: [kelasId], references: [id], onDelete: Cascade)
  koleksiSoal KoleksiSoal @relation(fields: [koleksiSoalId], references: [id], onDelete: Cascade)
  
  @@unique([kelasId, koleksiSoalId])
  @@index([kelasId])
  @@index([koleksiSoalId])
  @@index([order])
}

model Soal {
  id             Int               @id @default(autoincrement())
  koleksiSoalId  Int
  authorId       String
  pertanyaan     String
  difficulty     Difficulty?
  explanation    String?
  isActive       Boolean           @default(true)
  order          Int?              @default(0) // Optional field for drag and drop sorting
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  koleksiSoal    KoleksiSoal       @relation(fields: [koleksiSoalId], references: [id], onDelete: Cascade)
  author         User              @relation("SoalAuthor", fields: [authorId], references: [id], onDelete: Cascade)
  opsis          Opsi[]
  attachments    SoalAttachment[]  @relation("SoalAttachments")

  @@index([koleksiSoalId])
  @@index([authorId])
  @@index([difficulty])
  @@index([isActive])
  @@index([order])
}

model SoalAttachment {
  id             Int      @id @default(autoincrement())
  soalId         Int
  url            String
  type           String   // "image", "audio", "video", "document", etc.
  filename       String?
  size           Int?     // File size in bytes
  mimeType       String?
  order          Int      @default(0) // For ordering multiple attachments
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  soal           Soal     @relation("SoalAttachments", fields: [soalId], references: [id], onDelete: Cascade)

  @@index([soalId])
  @@index([type])
}

model Opsi {
  id             Int                @id @default(autoincrement())
  soalId         Int
  opsiText       String
  isCorrect      Boolean            @default(false)
  order          Int                @default(0) // For ordering options
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
  soal           Soal               @relation(fields: [soalId], references: [id], onDelete: Cascade)
  attachments    OpsiAttachment[]   @relation("OpsiAttachments")

  @@index([soalId])
  @@index([order])
  @@index([isCorrect])
}

model OpsiAttachment {
  id             Int      @id @default(autoincrement())
  opsiId         Int
  url            String
  type           String   // "image", "audio", "video", "document", etc.
  filename       String?
  size           Int?     // File size in bytes
  mimeType       String?
  order          Int      @default(0) // For ordering multiple attachments
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  opsi           Opsi     @relation("OpsiAttachments", fields: [opsiId], references: [id], onDelete: Cascade)

  @@index([opsiId])
  @@index([type])
}

model Tryout {
  id            Int                 @id @default(autoincrement())
  nama          String
  startTime     DateTime
  endTime       DateTime
  duration      Int                 @default(30) // Duration in minutes
  koleksiSoalId Int
  isActive      Boolean             @default(false)
  guruId        String
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  koleksiSoal   KoleksiSoal         @relation(fields: [koleksiSoalId], references: [id], onDelete: Cascade)
  guru          User                @relation("TryoutGuru", fields: [guruId], references: [id], onDelete: Cascade)
  participants  TryoutParticipant[]

  @@index([koleksiSoalId])
  @@index([isActive])
  @@index([startTime])
  @@index([guruId])
}

model TryoutParticipant {
  id               Int       @id @default(autoincrement())
  tryoutId         Int
  userId           String
  score            Int       @default(0)
  submittedAt      DateTime?
  timeTakenSeconds Int? // Nullable for backward compatibility with existing records
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  tryout           Tryout    @relation(fields: [tryoutId], references: [id], onDelete: Cascade)
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([tryoutId, userId])
}

// ================================
// VOCABULARY & LEARNING TOOLS
// ================================

model VocabularySet {
  id          Int              @id @default(autoincrement())
  title       String
  description String?
  icon        String?          @default("FaBook")
  isPublic    Boolean          @default(false)
  userId      String?
  kelasId     Int? // Optional relation to Kelas
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  user        User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  kelas       Kelas?           @relation(fields: [kelasId], references: [id], onDelete: Cascade) // Cascade when Kelas is deleted
  items       VocabularyItem[] @relation("VocabularySetItems")
  
  @@index([userId])
  @@index([kelasId])
  @@index([isPublic])
}

model VocabularyItem {
  id               Int            @id @default(autoincrement())
  korean           String
  indonesian       String
  isLearned        Boolean        @default(false)
  type             VocabularyType @default(WORD)
  pos              PartOfSpeech? // Part of Speech
  audioUrl         String?
  exampleSentences String[]       @default([]) // Array of example sentences
  order            Int            @default(0) // For ordering vocabulary items
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  creatorId        String // User who created this vocabulary item
  collectionId     Int? // Optional relation to VocabularySet
  creator          User           @relation("VocabularyItemCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  collection       VocabularySet? @relation("VocabularySetItems", fields: [collectionId], references: [id], onDelete: SetNull)

  @@index([creatorId])
  @@index([collectionId])
  @@index([order])
  @@index([isLearned])
  @@index([type])
}

model ExcalidrawDrawing {
  id        String   @id @default(cuid())
  name      String
  elements  Json     @db.JsonB // Excalidraw elements as JSON
  appState  Json?    @db.JsonB // Excalidraw app state as JSON
  files     Json?    @db.JsonB // Files data as JSON
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// ================================
// UTILITY & FEATURE MODELS
// ================================

model PushNotification {
  id        String   @id @default(cuid())
  endpoint  String   @unique
  p256dh    String
  auth      String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// Added Subscription model for Midtrans tracking

model Subscription {
  id              String         @id @default(cuid())
  userId          String
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  midtransOrderId String         @unique // Store the Midtrans order_id from createTransaction API
  status          MidtransStatus // Midtrans payment status
  accessTier      String         // The access tier subscribed to (e.g., "FREE", "PREMIUM")
  startDate       DateTime?      // Set when payment is confirmed (settlement/capture+accept)
  endDate         DateTime?      // Optional: For recurring/timed subscriptions
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Index for faster lookup via webhook
  @@index([userId])
  @@index([midtransOrderId])
  @@index([status])
  @@index([accessTier])
  @@index([startDate])
}

// Activity log for tracking user activities, streaks, and XP changes

model ActivityLog {
  id             String       @id @default(cuid())
  userId         String
  type           ActivityType
  description    String?
  xpEarned       Int?         // XP earned from this activity
  streakUpdated  Boolean      @default(false)
  previousStreak Int?
  newStreak      Int?
  previousLevel  Int?
  newLevel       Int?
  metadata       Json?        @db.JsonB // JSON for additional metadata
  createdAt      DateTime     @default(now())
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([createdAt])
  @@index([userId, type])
  @@index([userId, createdAt])
  @@index([type, createdAt])
  @@index([xpEarned])
}
